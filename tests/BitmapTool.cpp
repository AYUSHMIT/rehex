/* Reverse Engineer's Hex Editor
 * Copyright (C) 2022 Daniel Collins <solemnwarning@solemnwarning.net>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#include "../src/platform.hpp"

#include <gtest/gtest.h>
#include <wx/event.h>
#include <wx/frame.h>

#include "testutil.hpp"
#include "../src/BitmapTool.hpp"
#include "../src/SharedDocumentPointer.hpp"

using namespace REHex;

class BitmapToolTest: public ::testing::Test
{
	protected:
		wxFrame frame;
		
		SharedDocumentPointer doc;
		BitmapTool *bmtool;
		
		BitmapToolTest();
		
		static std::string bitmap_to_string(wxBitmap bitmap);
};

BitmapToolTest::BitmapToolTest():
	frame(NULL, wxID_ANY, "REHex Tests"),
	doc(SharedDocumentPointer::make())
{
	bmtool = new BitmapTool(&frame, doc);
}

std::string BitmapToolTest::bitmap_to_string(wxBitmap bitmap)
{
	wxImage image = bitmap.ConvertToImage();
	
	int width = image.GetWidth();
	int height = image.GetHeight();
	
	std::string s;
	s.reserve(width * height * 8);
	
	for(int y = 0; y < height; ++y)
	{
		for(int x = 0; x < width; ++x)
		{
			if(x > 0)
			{
				s += " ";
			}
			
			char colour[16];
			snprintf(colour, sizeof(colour), "#%02X%02X%02X",
				(unsigned int)(image.GetRed(x, y)),
				(unsigned int)(image.GetGreen(x, y)),
				(unsigned int)(image.GetBlue(x, y)));
			
			s += colour;
		}
		
		s += "\n";
	}
	
	return s;
}

TEST_F(BitmapToolTest, Format1BPPPacked)
{
	static const unsigned char PIXEL_DATA[] = {
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->force_bitmap_size(16, 16);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}

TEST_F(BitmapToolTest, Format1BPPPackedHalfScale)
{
	static const unsigned char PIXEL_DATA[] = {
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000\n"
		"#000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF\n"
		"#FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000\n"
		"#000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF\n"
		"#FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000\n"
		"#000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF\n"
		"#FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000\n"
		"#000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF #000000 #FFFFFF\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->force_bitmap_size(8, 8);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}

TEST_F(BitmapToolTest, Format1BPPPackedDoubleScale)
{
	static const unsigned char PIXEL_DATA[] = {
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->force_bitmap_size(32, 32);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}

TEST_F(BitmapToolTest, Format1BPPPackedFlipX)
{
	static const unsigned char PIXEL_DATA[] = {
		0xFC, 0xCC,
		0xFC, 0xCC,
		0xF3, 0x33,
		0xF3, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->set_flip_x(true);
	bmtool->force_bitmap_size(16, 16);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}

TEST_F(BitmapToolTest, Format1BPPPackedFlipY)
{
	static const unsigned char PIXEL_DATA[] = {
		0xFC, 0xCC,
		0xFC, 0xCC,
		0xF3, 0x33,
		0xF3, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->set_flip_y(true);
	bmtool->force_bitmap_size(16, 16);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}

TEST_F(BitmapToolTest, Format1BPPPackedFlipXY)
{
	static const unsigned char PIXEL_DATA[] = {
		0xFC, 0xCC,
		0xFC, 0xCC,
		0xF3, 0x33,
		0xF3, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
		0xCC, 0xCC,
		0xCC, 0xCC,
		0x33, 0x33,
		0x33, 0x33,
	};
	
	static const char *EXPECT_PIXELS =
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n"
		"#000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #000000 #000000 #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF #FFFFFF\n";
	
	doc->insert_data(0, PIXEL_DATA, sizeof(PIXEL_DATA));
	
	bmtool->set_image_offset(0);
	bmtool->set_image_size(16, 16);
	bmtool->set_pixel_format(BitmapTool::PIXEL_FMT_1BPP);
	bmtool->set_flip_x(true);
	bmtool->set_flip_y(true);
	bmtool->force_bitmap_size(16, 16);
	
	run_wx_until([&]() { return !bmtool->is_processing(); });
	
	std::string bitmap_pixels = bitmap_to_string(bmtool->get_bitmap());
	EXPECT_EQ(bitmap_pixels, EXPECT_PIXELS);
}
